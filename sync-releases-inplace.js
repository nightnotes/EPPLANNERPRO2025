// sync-releases-inplace.js â€” koppelt bestaande Releases DOM aan Firestore
import { cloud } from "./js/cloud.js";
const $=(s,c=document)=>c.querySelector(s); const $$=(s,c=document)=>Array.from(c.querySelectorAll(s));
function parseDateNL(s){const m=/(\d{2})-(\d{2})-(\d{4})/.exec((s||'').trim()); if(!m) return s; const[_,dd,mm,yy]=m; return `${yy}-${mm}-${dd}`;}
function greenify(cell,isDone){const dot=cell.querySelector('.dot, span, i, b, em')||cell.firstElementChild||cell; if(!dot)return; dot.classList.toggle('green',!!isDone); dot.classList.toggle('red',!isDone); if(!dot.style.backgroundColor){dot.style.backgroundColor=isDone?'rgb(34, 197, 94)':'rgb(239, 68, 68)'; dot.style.display='inline-block'; dot.style.width='10px'; dot.style.height='10px'; dot.style.borderRadius='50%';}}
function isGreen(cell){const dot=cell.querySelector('.dot, span, i, b, em')||cell.firstElementChild||cell; if(!dot)return false; if(dot.classList.contains('green'))return true; if(dot.classList.contains('red'))return false; return (getComputedStyle(dot).backgroundColor||'').includes('34, 197, 94');}
function findTable(){const ts=$$('table'); for(const t of ts){const head=t.tHead||t.querySelector('thead'); if(!head)continue; const txt=(head.innerText||'').toLowerCase(); if(txt.includes('datum')&&(txt.includes('artist')||txt.includes('artiest'))&&txt.includes('status'))return t;} return ts[0]||null;}
function readDOM(){const t=findTable(); if(!t) return []; const rows=$$('tbody tr',t); const list=[]; for(const tr of rows){const tds=$$('td',tr); if(tds.length<5)continue; const d=parseDateNL(tds[0].innerText); const artist=(tds[1].innerText||'').trim(); const who=(tds[2].innerText||'').trim(); const dist=(tds[3].innerText||'').trim(); const done=isGreen(tds[4]); list.push({date:d,artist,who,dist,done});} return list;}
function apply(list){const t=findTable(); if(!t) return; const rows=$$('tbody tr',t); const map=new Map((list||[]).map(r=>[`${r.date}|${r.artist}`,r])); for(const tr of rows){const tds=$$('td',tr); if(tds.length<5)continue; const d=parseDateNL(tds[0].innerText); const artist=(tds[1].innerText||'').trim(); const key=`${d}|${artist}`; const r=map.get(key); if(r) greenify(tds[4],!!r.done);}}
let saving=false, suppressUntil=0;
async function load(){try{apply(await cloud.get('releases',[]));}catch(e){console.warn('cloud get',e);}}
async function save(){try{saving=true; await cloud.set('releases', readDOM()); suppressUntil=performance.now()+800; saving=false;}catch(e){saving=false; console.warn('cloud set',e);}}
function attach(){const t=findTable(); if(!t)return; t.addEventListener('click',()=>setTimeout(()=>{if(!saving)save();},60)); const mo=new MutationObserver(()=>{const now=performance.now(); if(now<suppressUntil)return; clearTimeout(attach._t); attach._t=setTimeout(()=>{if(!saving)save();},120);}); mo.observe(t,{attributes:true,childList:true,subtree:true,characterData:true});}
(async()=>{ await load(); attach(); cloud.listen('releases',(v)=>{const now=performance.now(); if(now<suppressUntil)return; apply(Array.isArray(v)?v:[]);}); })();